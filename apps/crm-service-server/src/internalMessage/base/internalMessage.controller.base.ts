/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { InternalMessageService } from "../internalMessage.service";
import { InternalMessageCreateInput } from "./InternalMessageCreateInput";
import { InternalMessage } from "./InternalMessage";
import { InternalMessageFindManyArgs } from "./InternalMessageFindManyArgs";
import { InternalMessageWhereUniqueInput } from "./InternalMessageWhereUniqueInput";
import { InternalMessageUpdateInput } from "./InternalMessageUpdateInput";

export class InternalMessageControllerBase {
  constructor(protected readonly service: InternalMessageService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: InternalMessage })
  async createInternalMessage(
    @common.Body() data: InternalMessageCreateInput
  ): Promise<InternalMessage> {
    return await this.service.createInternalMessage({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        receiver: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [InternalMessage] })
  @ApiNestedQuery(InternalMessageFindManyArgs)
  async internalMessages(
    @common.Req() request: Request
  ): Promise<InternalMessage[]> {
    const args = plainToClass(InternalMessageFindManyArgs, request.query);
    return this.service.internalMessages({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        receiver: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: InternalMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async internalMessage(
    @common.Param() params: InternalMessageWhereUniqueInput
  ): Promise<InternalMessage | null> {
    const result = await this.service.internalMessage({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        receiver: true,
        sender: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: InternalMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateInternalMessage(
    @common.Param() params: InternalMessageWhereUniqueInput,
    @common.Body() data: InternalMessageUpdateInput
  ): Promise<InternalMessage | null> {
    try {
      return await this.service.updateInternalMessage({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          receiver: true,
          sender: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: InternalMessage })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteInternalMessage(
    @common.Param() params: InternalMessageWhereUniqueInput
  ): Promise<InternalMessage | null> {
    try {
      return await this.service.deleteInternalMessage({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          receiver: true,
          sender: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
