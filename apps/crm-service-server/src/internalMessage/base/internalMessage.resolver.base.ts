/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InternalMessage } from "./InternalMessage";
import { InternalMessageCountArgs } from "./InternalMessageCountArgs";
import { InternalMessageFindManyArgs } from "./InternalMessageFindManyArgs";
import { InternalMessageFindUniqueArgs } from "./InternalMessageFindUniqueArgs";
import { CreateInternalMessageArgs } from "./CreateInternalMessageArgs";
import { UpdateInternalMessageArgs } from "./UpdateInternalMessageArgs";
import { DeleteInternalMessageArgs } from "./DeleteInternalMessageArgs";
import { InternalMessageService } from "../internalMessage.service";
@graphql.Resolver(() => InternalMessage)
export class InternalMessageResolverBase {
  constructor(protected readonly service: InternalMessageService) {}

  async _internalMessagesMeta(
    @graphql.Args() args: InternalMessageCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InternalMessage])
  async internalMessages(
    @graphql.Args() args: InternalMessageFindManyArgs
  ): Promise<InternalMessage[]> {
    return this.service.internalMessages(args);
  }

  @graphql.Query(() => InternalMessage, { nullable: true })
  async internalMessage(
    @graphql.Args() args: InternalMessageFindUniqueArgs
  ): Promise<InternalMessage | null> {
    const result = await this.service.internalMessage(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InternalMessage)
  async createInternalMessage(
    @graphql.Args() args: CreateInternalMessageArgs
  ): Promise<InternalMessage> {
    return await this.service.createInternalMessage({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InternalMessage)
  async updateInternalMessage(
    @graphql.Args() args: UpdateInternalMessageArgs
  ): Promise<InternalMessage | null> {
    try {
      return await this.service.updateInternalMessage({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InternalMessage)
  async deleteInternalMessage(
    @graphql.Args() args: DeleteInternalMessageArgs
  ): Promise<InternalMessage | null> {
    try {
      return await this.service.deleteInternalMessage(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
